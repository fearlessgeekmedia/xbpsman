#!/bin/bash

# Quit is for the main menu. If Quit is 0, we will not exit the menu. When the user selects Quit,
# This value is changed to 1 and we will exit the main menu.
QUIT=0
XBPSMAN_VER=v0.2

gumnotfound() {
  printf "Error: gum not found.\n"
  exit 1
}

# Saves screen so we can return to the previous screen later.
savescreen() {
  printf '\e[?1049h'
}

# Restores previous screen
restorescreen() {
  printf '\e[?1049l'
}

mainmenu() {
  clear

  COLS=$(tput cols)
  COLS=$((COLS-2))
  ROWS=$(tput lines)
  ROWS=$((ROWS-10))
  gum style --border "rounded" --padding "1" --width="$COLS" --align="center" "xbpsman $XBPSMAN_VER"
  printf "\e[7;${ROWS}r"
  tput cup 7 0 && tput ed
  MAINCHOICE=$(gum choose "Update all packages" "Search and add packages" "Hold packages" "Unhold packages" "Remove installed packages" "Manage repositories" "About xbpsman" "Quit" --selected.background="4" --selected.foreground="16" --cursor="=> ")
  case $MAINCHOICE in
    "Update all packages" )
      clear
      COLS=$(tput cols)
      COLS=$((COLS-2))
      ROWS=$(tput lines)
      ROWS=$((ROWS-10))
      gum style --border "rounded" --padding "1" --width="$COLS" --align="center" "Update all Packages"
      printf "\e[7;${ROWS}r"
      tput cup 7 0 && tput ed
      sudo xbps-install -Syu
      output=$(sudo xbps-install -Syu 2>&1)
      
      # Check for common error indicators in the output
      if echo "$output" | grep -q "ERROR"; then
        printf "An error occurred during the update.\nPress any key to continue"
      else
        printf "Packages updated\n" 
      fi
      gum confirm "" --affirmative "OK" --negative ""

            ;;
    "Search and add packages" )
      # Search and add packages
      clear
      COLS=$(tput cols)
      COLS=$((COLS-2))
      ROWS=$(tput lines)
      ROWS=$((ROWS-10))
      printf "\\e[;r"
      gum style --border "rounded" --padding "1" --width="$COLS" --align="center" "Search and Add Packages"
      # tput cup 10 0 && tput ed
      
      INSTALLPKGS=$(xbps-query -Rs "" | gum filter --no-limit --no-fuzzy --height=$ROWS | awk '{print $2}')
      
      EXITERROR=$?
      if [[ $EXITERROR -ne 0 ]]; then
          printf "\\e[7;${ROWS}r"
          tput cup 7 0
          printf "Exiting. Going back to main menu."
          sleep 3
      else
          printf "\\e[7;${ROWS}r"
          tput cup 7 0
          
          # Directly use the selected package names
          sudo xbps-install $INSTALLPKGS
          
          EXITERROR=$?
          if [[ $EXITERROR -eq 0 ]]; then
              gum confirm "Installation succeeded" --affirmative "OK" --negative ""
              clear
          else
              gum confirm "Installation incomplete or completed with errors." --affirmative "OK" --negative ""
              clear
          fi
      fi
      ;;
    "Hold packages" )
      clear
      COLS=$(tput cols)
      COLS=$((COLS-2))
      ROWS=$(tput lines)
      ROWS=$((ROWS-10))
      printf "\\e[;r"
      gum style --border "rounded" --padding "1" --width="$COLS" --align="center" "Search and Add Packages"
      # tput cup 10 0 && tput ed

      HOLDPKGS=$(xbps-query -s "" | gum filter --no-limit --no-fuzzy --height="$ROWS" | awk '{print $2}')
      EXITERROR=$?
      if [[ $EXITERROR -ne 0 ]]; then
        printf "\\e[7;${ROWS}r"
        tput cup 7 0
        printf "Exiting. Going back to main menu."
        sleep 3
      else
        printf "\\e[7;${ROWS}r"
        tput cup 7 0

        sudo xbps-pkgdb -m hold $HOLDPKGS

        EXITERROR=$?
        if [[ $EXITERROR -eq 0 ]]; then
          gum confirm "Packages held, and will not be updated." --affirmative "OK" --negative ""
          clear
        else
          gum confirm ="Package holding errors. Cannot hold package." --afirmative "OK" --negative ""
          clear
        fi
      fi
      ;;
    "Unhold packages" )
      clear
      COLS=$(tput cols)
      COLS=$((COLS-2))
      ROWS=$(tput lines)
      ROWS=$((ROWS-10))
      printf "\\e[;r"
      gum style --border "rounded" --padding "1" --width="$COLS" --align="center" "Search and Add Packages"
      # tput cup 10 0 && tput ed

      UNHOLDPKGS=$(xbps-query -H | gum filter --no-limit --no-fuzzy --height="$ROWS")
      EXITERROR=$?
      if [[ $EXITERROR -ne 0 ]]; then
        printf "\\e[7;${ROWS}r"
        tput cup 7 0
        printf "Exiting. Going back to main menu."
        sleep 3
      else
        printf "\\e[7;${ROWS}r"
        tput cup 7 0

        echo $UNHOLDPKGS
        sudo xbps-pkgdb -m unhold $UNHOLDPKGS
        EXITERROR=$?
        if [[ $EXITERROR -eq 0 ]]; then
          gum confirm "Packages unheld. They will be updated again" --affirmative "OK" --negative ""
          clear
        else
          gum confirm "Package unholding errors. Cannot unhold package." --afirmative "OK" --negative ""
          clear
        fi
      fi
      ;;
    "Remove installed packages" )
      # Remove installed packages
      clear
      COLS=$(tput cols)
      COLS=$((COLS-2))
      ROWS=$(tput lines)
      ROWS=$((ROWS-10))
      printf "\\e[;r"
      gum style --border "rounded" --padding "1" --width="$COLS" --align="center" "Remove installed packages"
      tput cup 10 0 && tput ed
      
      # Corrected this line
      RMPKGS=$(xbps-query -s "" | gum filter --no-limit --no-fuzzy --height="$ROWS" | awk '{print $2}')
      
      EXITERROR=$?
      if [[ $EXITERROR -ne 0 ]]; then
          printf "\\e[7;${ROWS}r"
          tput cup 7 0
          printf "Exiting. Going back to main menu."
          sleep 3
      else
          printf "\\e[7;${ROWS}r"
          tput cup 7 0
          
          # Directly use the selected package names
          sudo xbps-remove $RMPKGS
          
          EXITERROR=$?
          if [[ $EXITERROR -eq 0 ]]; then
              gum confirm "Packages removed" --affirmative "OK" --negative ""
              clear
          else
              gum confirm "Package removal incomplete or completed with errors." --affirmative "OK" --negative ""
              clear
          fi
      fi
      ;;
    "About xbpsman")
      
      clear
      COLS=$(tput cols)
      COLS=$((COLS-2))
      ROWS=$(tput lines)
      ROWS=$((ROWS-10))
      printf "\\e[;r"
      gum style --border "rounded" --padding "1" --width="$COLS" --align="center" "About xbpsman"
      tput cup 10 0 && tput ed
      printf "xbpsman vesion: $XBPSMAN_VER\n"

      printf '%*s' "$COLS" '' | tr ' ' '='
      
      printf "\n\n"
      printf "TUI frontend for xbps on Void Linux\n"
      printf "For more information, visit https://fearlessgeekmedia.com/projects/xbpsman\n\n"
      printf "To support this and other Fearless Geek Media projects, visit\n"
      printf "https://fearlessgeekmedia.com/support\n\n"
      
      printf '%*s' "$COLS" '' | tr ' ' '-'
      
      printf "\n\n"
      printf "Copyright (c) 2024 Fearless Geek Media\n\n"

      printf "Permission is hereby granted, free of charge, to any person obtaining a copy"
      printf "of this software and associated documentation files (the \"Software\"), to deal"
      printf "in the Software without restriction, including without limitation the rights"
      printf "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
      printf "copies of the Software, and to permit persons to whom the Software is"
      printf "furnished to do so, subject to the following conditions:\n\n"
      printf ""
      printf "The above copyright notice and this permission notice shall be included in all"
      printf "copies or substantial portions of the Software.\n\n"
      printf ""
      printf "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
      printf "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
      printf "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
      printf "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
      printf "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
      printf "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"
      printf "SOFTWARE.\n\n"

      gum confirm "" --affirmative "OK" --negative ""

      ;;
    "Quit" )
      QUIT=1
      ;;
  esac
      
}

which gum &> /dev/null || gumnotfound

savescreen
while [[ $QUIT -eq 0 ]]; do
  mainmenu
done

printf '\e[;r'
restorescreen
